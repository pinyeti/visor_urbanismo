extends layout
block content

   

   

    p.help
        | Revisió Plà General (Aprovació Inicial)
        a.logo(href='https://www.palma.cat/')
            img(src='https://modeldeciutatgis-dev.palma.cat/images/escudo_palma.jpg')

    #map
       
       
    script.
      /*  var myData = !{JSON.stringify(jsonData)};
        var myDataEQ = !{JSON.stringify(jsonDataSLEQ)};
        var myDataRES = !{JSON.stringify(jsonDataRES)};
        var myDataCAT = !{JSON.stringify(jsonDataCAT)}; */

        // en help
       /*  a.logo(href='http://makina-corpus.com')
            img(src='http://depot.makina-corpus.org/public/logo.gif') */

       
        /*$(window).load(function () {
            $('head').append('<link id="favicon" rel="shortcut icon" type="image/png" href="opg/images/legends/favicon.png" />');
        }); */

        /* function changeFavicon(src) {
            $('link[rel="shortcut icon"]').attr('href', src)
        }

        changeFavicon('//google.com/favicon.ico'); */
       
        var serverPath="vscenegis.hopto.org";

         //  escribir acceso
        var urlA = new URL(window.location.protocol+'//'+window.location.host+"/opg/write_data_user");
        const params = {accion:"acceso_revision"};
        Object.keys(params).forEach(key => urlA.searchParams.append(key, params[key]));
        const dataRequest = {
            method: 'GET'
        }; 
        fetch(urlA,dataRequest);

        var popup = L.popup();

        var puntos;

        var titlePanels="";
        var contenidoPanel=`<div style='background-color:#f2f2f2;border-style: solid;border-width:0.1pt;border-color:black;' class="contenidoPanel">piaxxxxx</div>`;
        
      //  console.log(myData);
        // Create variable to hold map element, give initial settings to map
        // var map = L.map('map',{ center: [39.5695100, 2.6474500], zoom: 11, maxZoom: 18});
        map = L.map('map',{center: [39.5795100, 2.6874500], zoom: 12, minZoom: 12,maxZoom: 20});

        var measureControl = L.control.measure({
        // Change something about the popup via options
        // Valid options.. http://leafletjs.com/reference.html#popup-options
         
            position: 'topleft',
            primaryLengthUnit: 'meters',
            secondaryLengthUnit: 'kilometers',
            primaryAreaUnit: 'sqmeters',
            activeColor: '#990000',
            completedColor: '#001a80',
            units:{
                meters: {
                    factor: 1,
                    display: 'meters',
                    decimals: 2
                },
                sqmeters: {
                    factor: 1,
                    display: 'sqmeters',
                    decimals: 2
                }
            }
           
          
        }); 
        measureControl.addTo(map); 

       /* map.on('measurefinish', function(evt) {

            console.log("paix finish")
           // writeResults(evt);
        });

        function writeResults(results) {
            document.getElementById('eventoutput').innerHTML = JSON.stringify(
            {
                area: results.area,
                areaDisplay: results.areaDisplay,
                lastCoord: results.lastCoord,
                length: results.length,
                lengthDisplay: results.lengthDisplay,
                pointCount: results.pointCount,
                points: results.points
            },
            null,
            2
            );
        } */

      //  var measureControl = L.control.measure(options);
      //  measureControl.addTo(myMap);
        
        //$('.leaflet-control-attribution').hide();
        //document.getElementsByClassName( 'leaflet-control-attribution' )[0].style.display = 'none';
       

        

        var help=true;
        var defaultCursor=document.getElementById('map').style.cursor;
        document.getElementById('map').style.cursor = 'help';
        var icon1='fa fa-info-circle  fa-2x'
        var icon2='fa fa-minus-circle fa-2x'

        var actionInfo = L.Toolbar2.Action.extend({
            options: {
                toolbarIcon: {
                    className: icon2,
                    tooltip:'Deseleccionar els elements',
                }
            },
            addHooks: function () {
                console.log("pulsado")
                if(puntos!=null) map.removeLayer(puntos);  
              /*  if(help==false){             
                    document.getElementById('map').style.cursor = 'help';
                    help=true;             
                }else{
                  //  help=false; 

                } */
               
            }

        });
        var actionDefault = L.Toolbar2.Action.extend({
            options: {
                toolbarIcon: {
                    className: icon2,
                    tooltip:'<a>tftft</a>',
                }
            },
            addHooks: function () {
                if(help==true){             
                    document.getElementById('map').style.cursor = defaultCursor;
                    help=false;             
                }             
            }
        });

        new L.Toolbar2.Control({
          
            position: 'topleft',
            actions: [actionInfo]
        }).addTo(map); 


        var geomCruce="";
        var catalogosCadena="";
        var parcelasCadena="";
        var callesCadena="";
        var hojas1000Cadena="";
        var hojas1000UTMCadena="";
        var zonasCadena="";
        var clasSueloCadena="";
        var htmlarray=new Array(); 
        var arrayArticulos = []; 
        var arrayArticulosD = []; 
       // var arrayNormativa = new Array(); 
        var contDiv=0;


        

        function changeColor(newColor) {
            var elem = document.getElementById('div1');
            var idhtml = document.getElementById("cambiar");
            var indexHTML = idhtml.selectedIndex;
            console.log("indice="+indexHTML);
            console.log("array="+htmlarray);
            elem.style.color = newColor;
            elem.innerHTML=htmlarray[indexHTML];
           
        }

        

        function isMobile(){
            return (
                (navigator.userAgent.match(/Android/i)) ||
                (navigator.userAgent.match(/webOS/i)) ||
                (navigator.userAgent.match(/iPhone/i)) ||
                (navigator.userAgent.match(/iPod/i)) ||
                (navigator.userAgent.match(/iPad/i)) ||
                (navigator.userAgent.match(/BlackBerry/i))
            );
        }
        

        async function calculoResidencial(info){

            var html_residencial="";
            if(info.features!=null){
                const heightResidencial=info.features.length*22;
               // var html_residencial=``;
                html_residencial=html_residencial+`<TABLE style='padding:3px;font-size:9px;font-family:Arial;color:#000000;width:90%;height:${heightResidencial}px'  BORDER=1  bgcolor="#cfd7e7" BORDERCOLOR="grey" CELLPADDING=3 CELLSPACING=1>
                                                    <tr align="center" bgcolor="#e6e6e6" style='padding:3px;font-size:7.5pt;font-family:Arial Black;color:#4d4d4d;height:22px'>
                                                        <td>TIPO EDIFICACIÓ</td>
                                                        <td>CALIFICACIÓ</td>
                                                        <td>SUP. EDIFICABLE M2</td>
                                                        <td>EDIFICABILIDAD M2</td>
                                                        <td>NUM. VIVIENDAS</td>
                                                    </tr>`;
                var cont=0; 
                var supsolTotal=0;
                var supedificableTotal=0;
                var numVivTotal=0;      
                               
                for(var n=0;n<info.features.length;n++){ 

                    let info_params=await readParametersEdif("calificacion_residencial_visor","codigo='"+info.features[n].properties.codigo+"'"); 

                   if(info_params.features!=null){     
                    console.log("coef_edif="+info_params.features[0].properties.e_p);
                    var superf_edificable=turf.area(info.features[n].geometry)*info_params.features[0].properties.e_p;
                    superf_edificableT=superf_edificable.toFixed(2);
                    var supsol=turf.area(info.features[n].geometry);
                    supsolT=supsol.toFixed(2);

                    var numviv;
                    if(info.features[n].properties.codigo.substr(0, 1)!='I' && info.features[n].properties.codigo.substr(0, 1)!='J')
                        numviv=Math.round(supsol*info_params.features[0].properties.irp_n);
                    else
                        numviv=Math.floor(supsol/info_params.features[0].properties.s_m);
                
                    supsolTotal=supsolTotal+supsol;
                    supedificableTotal=supedificableTotal+superf_edificable;
                    numVivTotal=numVivTotal+numviv;                 
                    
                    if(supsol>10){
                         var unificado=``;
                        if(cont==0) 
                            unificado=`<td bgcolor="#fddbdb" rowspan="`+info.features.length+`">RESIDENCIAL</td>`;
                        else
                            unificado=``;
                        cont++;    
                        html_residencial=html_residencial+`
                                        <tr align="center" bgcolor="white" style='padding:3px;font-size:9.5px;font-family:Arial;color:#000000;height:22px'>
                                            ${unificado}
                                            <td style='font-size:9.5px;font-family:Arial Black'>
                                                <input type="button" name="Boton1" value=${info.features[n].properties.codigo} OnClick="fichaRES(this)">
                                            </td>
                                            <td style='font-size:9pt;font-family:Arial' align="right">${supsolT} </td>
                                            <td style='font-size:9pt;font-family:Arial' align="right">${superf_edificableT}</td>
                                            <td style='font-size:9pt;font-family:Arial' align="right">${numviv}</td>
                                        </tr>`;
                    }
                    console.log("intersect="+info.features[n].properties.codigo+" , "+turf.area(info.features[n].geometry));
                   } 
                }

                supsolTotalT=supsolTotal.toFixed(2);
                supedificableTotalT=supedificableTotal.toFixed(2);
                html_residencial=html_residencial+`<tfoot>
                                                    <tr bgcolor="white">
                                                        <td bgcolor="#ffe699" style='font-size:8pt;font-family:Arial Black' align="right" colspan=2>TOTAL</td>
                                                        <td style='font-size:8pt;font-family:Arial Black;color:#990000' align="right">${supsolTotalT}</td>
                                                        <td style='font-size:8pt;font-family:Arial Black;color:#990000' align="right">${supedificableTotalT}</td>
                                                        <td style='font-size:8pt;font-family:Arial Black;color:#990000' align="right">${numVivTotal}</td>
                                                    </tr>
                                                </rfoot>`
                html_residencial=html_residencial+`</TABLE>`;
            }

            return html_residencial;


        }

        async function calculoSecundario(info){

            var html="";

            if(info.features!=null){
                const heightResidencial=info.features.length*22;
                
                html=html+`<TABLE style='padding:3px;font-size:9px;font-family:Arial;color:#000000;width:90%;height:${heightResidencial}px'  BORDER=1  bgcolor="#cfd7e7" BORDERCOLOR="grey" CELLPADDING=3 CELLSPACING=1>
                                                    <tr align="center" bgcolor="#e6e6e6" style='padding:3px;font-size:7.5pt;font-family:Arial Black;color:#000000;height:22px'>
                                                        <td>TIPO EDIFICACIÓ</td>
                                                        <td>CALIFICACIÓ</td>
                                                        <td>SUP. EDIFICABLE</td>
                                                        <td>EDIFICABILIDAD</td>
                                                       
                                                    </tr>`;
                var cont=0; 
                var supsolTotal=0;
                var supedificableTotal=0;
                                     
                for(var n=0;n<info.features.length;n++){ 

                    let info_params=await readParametersEdif("calificacion_secundario_visor","codigo='"+info.features[n].properties.codigo+"'"); 
                   if(info_params.features!=null){   
                    console.log("coef_edif="+info_params.features[0].properties.e_p);
                    var superf_edificable=turf.area(info.features[n].geometry)*info_params.features[0].properties.e_p;
                    superf_edificableT=superf_edificable.toFixed(2);
                    var supsol=turf.area(info.features[n].geometry);
                    supsolT=supsol.toFixed(2);

                    var numviv;
                    if(info.features[n].properties.codigo.substr(0, 1)!='I' && info.features[n].properties.codigo.substr(0, 1)!='J')
                        numviv=Math.round(supsol*info_params.features[0].properties.irp_n);
                    else
                        numviv=Math.floor(supsol/info_params.features[0].properties.s_m);
                
                    supsolTotal=supsolTotal+supsol;
                    supedificableTotal=supedificableTotal+superf_edificable;
                           
                    
                    if(supsol>10){
                         var unificado=``;
                        if(cont==0) 
                            unificado=`<td bgcolor="#ecbdec" rowspan="`+info.features.length+`">SECUNDARIO</td>`;
                        else
                            unificado=``;
                        cont++;    
                        html=html+`
                                        <tr align="center" bgcolor="white" style='padding:3px;font-size:9.5px;font-family:Arial;color:#000000;height:22px'>
                                            ${unificado}
                                            <td style='font-size:9.5px;font-family:Arial Black'>
                                                <input type="button" name="Boton1" value=${info.features[n].properties.codigo} OnClick="fichaSEC(this)">
                                            </td>
                                            <td style='font-size:9pt;font-family:Arial' align="right">${supsolT} </td>
                                            <td style='font-size:9pt;font-family:Arial' align="right">${superf_edificableT}</td>
                                           
                                        </tr>`;
                    }
                    console.log("intersect="+info.features[n].properties.codigo+" , "+turf.area(info.features[n].geometry));
                   } 
                }

                supsolTotalT=supsolTotal.toFixed(2);
                supedificableTotalT=supedificableTotal.toFixed(2);
                html=html+`<tfoot>
                                                    <tr bgcolor="white">
                                                        <td bgcolor="#ffe699" style='font-size:8pt;font-family:Arial Black' align="right" colspan=2>TOTAL</td>
                                                        <td style='font-size:8pt;font-family:Arial Black;color:#990000' align="right">${supsolTotalT}</td>
                                                        <td style='font-size:8pt;font-family:Arial Black;color:#990000' align="right">${supedificableTotalT}</td>
                                                      
                                                    </tr>
                                                </rfoot>`
                html=html+`</TABLE>`;
            }

            return html;


        }

       

        

        async function computeParcelasNR(tablaCruce, filtroSQL){

            var numCells=0;
              var html_NR="";
            var cont=0;

            var infoP=await crossTables("parcela_su_ru",tablaCruce,filtroSQL);
            if(infoP.features!=null){
               
                for(var q=0;q<infoP.features.length;q++){
                    console.log("parcelas",infoP.features[q].properties.refcat);

                    // QUERY PARCELAS TIPO11
            var filtro11="ref_catastral='"+infoP.features[q].properties.refcat+"'";
            url = new URL("http://"+serverPath+"/infoquery");
            const params11 = {tabla: "tipo11", filtro: filtro11};
            Object.keys(params11).forEach(key => url.searchParams.append(key, params11[key]));
            const dataRequest11 = {
                method: 'GET'
            };
            let response11 = await fetch(url,dataRequest11);
            console.log("RESPONSE11="+response11);
            let info11 = await response11.json();

                  
            var info=await crossTables("zonas_centro_historico","parcela_su_ru","fid="+infoP.features[q].properties.fid);
            if(info.features!=null && info11!=null){

               // var info_array=await createInfoFeatures(info);
               // numCells=numCells+info_array.length;
               // for(var n=0;n<info_array.length;n++){ 

                numCells=numCells+info.features.length;   

                console.log("features",info.features.length);  
               // var cont=0;
                for(var n=0;n<info.features.length;n++){
                    var feat=info.features[n];
                    var supsol=turf.area(info.features[n].geometry);

                   if(supsol>20){ 

                    var edificabilidad=0;
                    var numviv=0;
                    if(info.features[n].properties.codigo.substring(0,1)=="R"){
                        edificabilidad=info11.features[0].properties.sup_constr_total;
                        numviv=Math.floor(edificabilidad/80);
                        console.log("edif",edificabilidad);

                    }else{
                        var infoN=await crossTablesFilter("zonas_centro_historico","zona_n_edificable12","fid="+info.features[n].properties.fid,"fid>0");
                       if(infoN.features!=null)
                        for(var p=0;p<infoN.features.length;p++){
                            console.log("codigoN",infoN.features[p].properties.codigo);
                            console.log("area",turf.area(infoN.features[p].geometry));
                            supsol1=turf.area(infoN.features[p].geometry);
                            if(supsol1>20){
                                var altura=2;
                                supsol=supsol1;
                                if(infoN.features[p].properties.codigo!="N"){ 
                                    altura=info.features[p].properties.codigo.substring(1,2);
                                    altura=parseInt(altura,10);
                                }
                                edificabilidad=supsol*altura;
                                switch(infoN.features[p].properties.codigo){

                                    case "N2":
                                        numviv=supsol*0.0254;
                                        break;
                                    case "N3":
                                        numviv=supsol*0.0385;
                                        break;
                                    case "N4":
                                        numviv=supsol*0.0541;
                                        break;
                                    case "N5":
                                        numviv=supsol*0.0645;
                                        break;
                                    case "N6":
                                        numviv=supsol*0.0769;
                                        break;
                                }
                            }
                           
                        }
                         
                    }

                    var supsolT=supsol.toFixed(2); 
                    edificabilidad=edificabilidad.toFixed(2);
                    numviv=Math.floor(numviv);

                    console.log("features props",info.features[n].properties.codigo);  
                    console.log("supsolt",supsolT);  
                           
                   // supsolTotal=supsolTotal+supsol;             
                    var unificado=``;


                    if(cont==0)
                      //  unificado=`<td  bgcolor="#e6d2be" rowspan="`+(info.features.length*infoP.features.length)+`">ZONA CENTRO HISTORICO</td>`;
                      unificado=`<td  bgcolor="#e6d2be" rowspan="`+(infoP.features.length)+`">ZONA CENTRO HISTORICO</td>`;
                    else
                        unificado=``;      
                  
                    html_NR=html_NR+`
                        <tr align="center" bgcolor="white" style='padding:3px;font-size:9.5px;font-family:Arial;color:#000000;height:22px'>
                            ${unificado}
                            <td style='font-size:9pt;font-family:Arial' align="right">-</td>
                            <td style='font-size:9.5px;font-family:Arial Black'>
                                <input type="button" name="Boton1" value=${info.features[n].properties.codigo} OnClick="fichaCAT_ACT(this)">
                            </td>
                            <td style='font-size:9pt;font-family:Arial' align="right">-</td>
                            <td style='font-size:9pt;font-family:Arial' align="right">${supsolT} </td>
                            <td style='font-size:9pt;font-family:Arial' align="center">${edificabilidad}</td>
                            <td style='font-size:9pt;font-family:Arial' align="right">${numviv}</td>
                        </tr>`;
                    
                     cont++;
                   }
                }
            } 


                }
            }

            console.log(html_NR);

            feat={html:html_NR,
                  numC:numCells
                  };

            return feat;
        }

      

       

        function plusSlides(n) {
            showSlides(slideIndex += n);
        }
        
        function currentSlide(n) {
            showSlides(slideIndex = n);
        }
        
        function showSlides(n) {
            var i;
            var slides = document.getElementsByClassName("mySlides");
            var dots = document.getElementsByClassName("demo");
            var captionText = document.getElementById("caption");
            if (n > slides.length) {slideIndex = 1}
            if (n < 1) {slideIndex = slides.length}
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
            }
            for (i = 0; i < dots.length; i++) {
                dots[i].className = dots[i].className.replace(" active", "");
            }
            slides[slideIndex-1].style.display = "block";
            dots[slideIndex-1].className += " active";
            captionText.innerHTML = dots[slideIndex-1].alt;
        }

       /* async function readDataFeature(tableSource,filtroSQL){
          
            let url = new URL("http://"+serverPath+"/infoquery");
            const params = {tabla: tableSource, filtro: filtroSQL};
            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
            const dataRequest = {
                method: 'GET'
            };
            var response = await fetch(url,dataRequest);
            var info_geojson = await response.json();

            return info_geojson;        

        } */

        async function createStringCross(info,geomSource,fieldName){


            cont=0;
            var cadena="";
           if(info.features!=null) 
            for(var n=0;n<info.features.length;n++){
                if(turf.area(info.features[n].geometry)>(turf.area(geomSource)*10)/100){

                    var properties=info.features[n].properties;
                    var fieldValue=properties[fieldName];
                    if(cont==0){
                       
                        cadena=fieldValue;
                    }else{   
                        cadena=cadena+", "+fieldValue;
                    }    
                    cont++;
                }
            }

            return cadena;


        }

        async function createCompostStringCross(info,geomSource,fieldName){


            cont=0;
            var cadena="";

           if(info.features!=null) 
            for(var n=0;n<info.features.length;n++){
                if(turf.area(info.features[n].geometry)>(turf.area(geomSource)*10)/100){

                    var properties=info.features[n].properties;
                    var fields="";
                    for(var p=0;p<fieldName.length;p++){
                        var field=fieldName[p];
                        var fieldValue=properties[field];
                        fields=fields+" "+fieldValue;
                    }

                    if(cont==0){   
                                 
                        cadena=fields;
                    }else{   
                        cadena=cadena+", "+fields;
                    }    
                    cont++;
                }
            }

            return cadena;


        }

      
        
       
        
        function style(feature) { 
            return { 
                fillColor: 'yellow', 
                weight: 6, 
                opacity: 1, 
                color: 'yellow', 
                dashArray: '2,8', 
                fillOpacity: 0
            }; 
        }

       

        async function doMap2(latlng,info_geojson,zoomFly){

            // var map2 = L.map('map2');
          //  var map2;
          
            map2 = L.map('map2',{zoomControl:false,preferCanvas: true});

           /* googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
                minZoom: 12,
                maxZoom: 20,
                subdomains:['mt0','mt1','mt2','mt3'],
                //edgeBufferTiles: 1
            }).addTo(map2);*/

           /* googleHybrid = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
                minZoom: 12,
                maxZoom: 20,
                subdomains:['mt0','mt1','mt2','mt3']
            }).addTo(map2); */

            L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {   
                minZoom:12, 
                maxZoom: 20,
            //  maxNativeZoom: 19,
                // attribution: '© OpenStreetMap',
                edgeBufferTiles: 1
                
            }).addTo(map2);   
        
            L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CARTOGRAFIA/{z}/{x}/{y}.png', {
                minZoom: 12,
                maxZoom: 20,
                tms: false,
                // attribution: 'Generated by TilesXYZ',
                edgeBufferTiles: 1,
                opacity: 1

            }).addTo(map2);  

            L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CALIFICACIONES_AI/{z}/{x}/{y}.png', {
                minZoom: 12,
                maxZoom: 20,
                tms: false,
                // attribution: 'Generated by TilesXYZ',
                edgeBufferTiles: 1,
                opacity: 1

            }).addTo(map2);  

             L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/AMBITOS_AI/{z}/{x}/{y}.png', {
                minZoom: 12,
                maxZoom: 20,
                tms: false,
                // attribution: 'Generated by TilesXYZ',
                edgeBufferTiles: 1,
                opacity: 1

            }).addTo(map2);  

     


             var bbox = turf.bbox(info_geojson.features[0].geometry);
            var polyBBOX = turf.bboxPolygon(bbox);
          
            var coordsB = turf.getCoords(polyBBOX);
            var coords = []; 
            coords[0]=[coordsB[0][0][1],coordsB[0][0][0]];
            coords[1]=[coordsB[0][1][1],coordsB[0][1][0]];
            coords[2]=[coordsB[0][2][1],coordsB[0][2][0]];
            coords[3]=[coordsB[0][3][1],coordsB[0][3][0]];
          
            var poly = L.polygon(
               coords 
                );

           // sidebar.close('queryTables');

            map2.fitBounds(poly.getBounds());
           // map2.flyTo(latlng,zoomFly);
           // map.setZoom(map.getZoom()-1);
         //  map2.setView(latlng,16);
         //  map2.panInsideBounds(poly.getBounds());
            
            if(puntos!=null) map2.removeLayer(puntos);  
            puntos = L.geoJSON(info_geojson, { style: style });  
            
            map2.addLayer(puntos);
         
              
        }

       

        function doImage(err, canvas) {
           
            var img = document.createElement('img');
            var dimensions = map.getSize();
            img.width = dimensions.x;
            img.height = dimensions.y;
            img.src = canvas.toDataURL();
            document.getElementById('imagemap').innerHTML = '';
            document.getElementById('imagemap').appendChild(img);
        }

       

        var content="paix"
        map.on('click', function(e) {

          if(help==true){  
            var popLocation= e.latlng;
            var x=e.latlng.utm().x
            var y=e.latlng.utm().y

            infoFeaturesFASE1(e);

           
          
              
          }  
        });  
        // Add OpenStreetMap tile layer to map element
       var osm=L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {   
            maxZoom: 21,
            maxNativeZoom: 19,
        	attribution: '© OpenStreetMap'
        })
        var cartodb_light_all=L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {   
            minZoom:10, 
            maxZoom: 20,
          //  maxNativeZoom: 19,
        	// attribution: '© OpenStreetMap',
            edgeBufferTiles: 1
            
        }) 
        var cartodb_dark_all=L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', {    
            maxZoom: 21, 
            maxNativeZoom: 19,
        	// attribution: '© OpenStreetMap'
        }) 

       /* var catastro=L.tileLayer.wms('https://ovc.catastro.meh.es/Cartografia/WMS/ServidorWMS.aspx?', {   
        //var catastro=L.tileLayer.wms('http://ovc.catastro.meh.es/cartografia/INSPIRE/spadgcwms.aspx', {     
            layers: "Catastro",//nombre de la capa (ver get capabilities)
            format: 'image/jpeg',
            transparent: true,
            //version: '1.1.1',//wms version (ver get capabilities)
            attribution: "DIRECCION GENERAL DEL CATASTRO",
            tms:true,
             maxZoom: 20,
             edgeBufferTiles: 1
        }) */
        
        var pnoa = L.tileLayer.wms("http://www.ign.es/wms-inspire/pnoa-ma?SERVICE=WMS&", {
            layers: "OI.OrthoimageCoverage",//nombre de la capa (ver get capabilities)
            format: 'image/jpeg',
            transparent: true,
            version: '1.3.0',//wms version (ver get capabilities)
            //attribution: "PNOA WMS. Cedido por © Instituto Geográfico Nacional de España",
            maxZoom: 19,
            edgeBufferTiles: 0
        });

        //  var osm=L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', {  
       // var layerToner = new L.StamenTileLayer("terrain").addTo(map); // wstercolor,terrain,toner

      

       /* var wmsPARCELAS = L.tileLayer.wms("http://vscenegis.hopto.org:5000/geoserver/pgou98/wms?", {
                      
            layers:'parcela_su_ru_calles',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
            // attribution: 'OFICINA PLAN GENERAL & SERVICIO INFORMACIÓN URBANISTICA',
            minZoom: 18,
            maxZoom: 20,
            //edgeBufferTiles: 1
           
        }) */

       /* var wmsCONSTRU_SU = L.tileLayer.wms("http://vscenegis.hopto.org:5000/geoserver/pgou98/wms?", {
                      
            layers:'constru_su2',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 18,
            maxZoom: 20,
            //edgeBufferTiles: 1
           
        }) */

        /* var wms_calific_zonas = L.tileLayer.wms("http://vscenegis.hopto.org:5000/geoserver/OPG_VIGENTE/wms?", {
                      
            layers:'calific_zonas',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        }).addTo(map);  */

       // https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_1956_IB/MapServer/WMSServer?request=GetCapabilities&service=WMS
       // https://ideib.caib.es/geoserveis/rest/services/imatges/GOIB_Ortofoto_1984_IB/MapServer?request=GetCapabilities&service=WMS
       // https://ideib.caib.es/geoserveis/services/imatges/GOIB_Foto_2001_IB/MapServer/WMSServer?request=GetCapabilities&service=WMS
       // https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2002_IB/MapServer/WMSServer?request=GetCapabilities&service=WMS
       // https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2018_IB/MapServer/WMSServer?request=getCapabilities&service=wms

       var wms1956 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_1956_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })
       // map.addLayer(wms1956);

        var wms1995 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Foto_1995_Ma/MapServer/WMSServer?", {
                      
            layers:'1',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })
      //  map.addLayer(wms1995);

        var wms2001 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Foto_2001_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })
       // map.addLayer(wms2001);

       var wms2002 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2002_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms2006 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2006_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms2008 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2008_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms2010 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2010_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms2012 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2012_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })
        
        var wms2015 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2015_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms2018 = L.tileLayer.wms("https://ideib.caib.es/geoserveis/services/imatges/GOIB_Ortofoto_2018_IB/MapServer/WMSServer?", {
                      
            layers:'0',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        var wms81_86 = L.tileLayer.wms("http://www.ign.es/wms/pnoa-historico", {
                      
            layers:'Nacional_1981-1986',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        // http://www.ign.es/wms/pnoa-historico


        var wmsPNOA2018 = L.tileLayer.wms("http://www.ign.es/wms-inspire/pnoa-ma?SERVICE=WMS&", {
                      
            layers:'OI.OrthoimageCoverage',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

         var wmsPNOA2015 = L.tileLayer.wms("http://www.ign.es/wms/pnoa-historico", {
                      
            layers:'PNOA2015',
            format: 'image/png',
            // crs: crs25831,
            transparent: true,
            continuousWorld: true,
           // attribution: 'Toni & Feliu',
            minZoom: 12,
            maxZoom: 20,
            edgeBufferTiles: 1
           
        })

        googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
            minZoom: 12,
            maxZoom: 20,
            subdomains:['mt0','mt1','mt2','mt3']
        });

        googleHybrid = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
            minZoom: 12,
            maxZoom: 20,
            subdomains:['mt0','mt1','mt2','mt3']
        });

        var googleTraffic = L.tileLayer('https://{s}.google.com/vt/lyrs=m@221097413,traffic&x={x}&y={y}&z={z}', {
            minZoom: 12,
            maxZoom: 20,
            
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
        });

        googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
            minZoom: 12,
            maxZoom: 20,
            subdomains:['mt0','mt1','mt2','mt3'],
            //edgeBufferTiles: 1
        });

        googleTerrain = L.tileLayer('http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',{
            minZoom: 12,
            maxZoom: 20,
            subdomains:['mt0','mt1','mt2','mt3']
        });

        var mapLink = '<a href="http://www.esri.com/">Esri</a>';
        var wholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';
        
        esriMap=L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '&copy; '+mapLink+', '+wholink,
            minZoom: 12,
            maxZoom: 18,
        });

    

        map.addLayer(cartodb_light_all);

      //  map.addLayer(wmsPNOA2018);

       // map.addLayer(wmsPARCELAS);
       // map.addLayer(wmsCONSTRU_SU);
       
        
       

       


        


        var baseTree = [
            {
                label: "<LABEL style='font-size:8pt;font-family:Arial Black;color:black'><U>INFORMACIÓ BASE</U></LABEL>",
                children: [
                    
                    {label: "CartoDB (light_all)", layer: cartodb_light_all, name: 'CartoDB (light_all)'},
                    {label: "CartoDB (dark_all)", layer: cartodb_dark_all, name: 'CartoDB (dark_all)'},
                    {label: '<i class="fa fa-bars fa-xs"></i> OSM', layer: osm, name: 'OpenStreeMap'},
                    {label: 'PNOA Actual', layer: wmsPNOA2018, name: 'PNOA 2018'},
                   // {label: '2018', layer: wms2018, name: 'PNOA 2018'},
                    {label: '2015', layer: wms2015, name: 'PNOA 2015'},
                    {label: '2012', layer: wms2012, name: 'PNOA 2012'},
                    {label: '2010', layer: wms2010, name: 'PNOA 2010'},
                    {label: '2008', layer: wms2008, name: 'PNOA 2008'},
                    {label: '2006', layer: wms2006, name: 'PNOA 2006'},
                    {label: '2002', layer: wms2002, name: 'PNOA 2018'},
                    {label: '2001', layer: wms2001, name: 'PNOA 2018'},
                    {label: '1995', layer: wms1995, name: 'PNOA 2018'},
                    {label: '1981-1986', layer: wms81_86, name: 'PNOA 2018'},
                    {label: '1956', layer: wms1956, name: 'PNOA 2018'},
                    {label: 'googleStreets', layer: googleStreets, name: 'PNOA 2018'},
                    {label: 'googleHybrid', layer: googleHybrid, name: 'PNOA 2018'},
                    {label: 'googleTraffic', layer: googleTraffic, name: 'PNOA 2018'},
                    {label: 'googleSat', layer: googleSat, name: 'PNOA 2018'},
                    {label: 'googleTerrain', layer: googleTerrain, name: 'PNOA 2018'},
                   // {label: 'esriMap', layer: esriMap, name: 'PNOA 2018'},
                    
                    
                   
                ]
            }
        ];     
        
        //var catastro=L.tileLayer('http://'+serverPath+'/images/CONSTRU2/{z}/{x}/{y}.png', {
         var catastro=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CATASTRO2020/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            opacity:1,
            // attribution: 'Generated by TilesXYZ',
            edgeBufferTiles: 1
        });  

         var cartografia_imi=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CARTOGRAFIA/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            opacity:1,
            //attribution: 'Cartografia elaborada por IMI Palma',
            edgeBufferTiles: 1
        }).addTo(map);  

        /* var topografia_pod=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/TOPOGRAFIA_POD/{z}/{x}/{y}.png', {
            minZoom: 16,
            maxZoom: 20,
            tms: false,
            opacity:1,
            //attribution: 'Cartografia elaborada por IMI Palma',
            edgeBufferTiles: 1
        }).addTo(map); */ 
       

        var clasificacion_suelo=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CLASIFICACION_SUELO_AI/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        })     


        var categorias_rustico=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CATEGORIAS_RUSTICO_AI/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        }).addTo(map); ;  


        var apt_rev=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/APT_REV/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '(OPG) Oficna Plan general)', 
            edgeBufferTiles: 1
        })  

         var apt_otras=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/APT_OTRAS/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '(OPG) Oficna Plan general)', 
            edgeBufferTiles: 1
        })  

        var apr_rev=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/APR_REV/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        })

         var calificaciones=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CALIFICACIONES_AI/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        }).addTo(map);   

        var ambitos_ai=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/AMBITOS_AI/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        }).addTo(map);   

        var cabrera_ai=L.tileLayer(window.location.protocol+'//'+window.location.host+'/images/CABRERA/{z}/{x}/{y}.png', {
            minZoom: 12,
            maxZoom: 20,
            tms: false,
            
            attribution: '<a href="https://www.palma.cat/portal/PALMA/contenedor1.jsp?seccion=s_lloc_d10_v1.jsp&codbusqueda=221&language=ca&codResi=1&codMenuPN=1812&codMenu=845&layout=contenedor1.jsp&layout=contenedor1.jsp">(OPG) Oficina Plan General</a>', 
            edgeBufferTiles: 1
        }).addTo(map);   



         var overlayTree = [
            {
                label: "<LABEL style='font-size:8pt;font-family:Arial Black;color:black'><U>PLANEAMIENTO</U></LABEL>",
                children: [
                  

                    {label: "Catastro", layer: catastro, name: 'PLan General'},
                    {label: "Cartografia", layer: cartografia_imi, name: 'PLan General'},               
                    {label: "Categories Rùstic", layer:categorias_rustico, name: 'Categories Rùstic'},   
                    {label: "Cabrera", layer:cabrera_ai, name: 'Cabrera'},                
                    {label: "APR (Revisió)", layer: apr_rev, name: 'PLan General'},
                    {label: "Clasificacio sol", layer: clasificacion_suelo, name: 'PLan General'},
                    {label: "Plan general", layer: calificaciones, name: 'PLan General'},
                    {label: "Ambitos", layer: ambitos_ai, name: 'PLan General'},
                    {label: "APT (Revisió)", layer: apt_rev, name: 'PLan General'},  
                    {label: "APT (Reservas)", layer: apt_otras, name: 'PLan General'},    
                   
                ]
            }
        ];     

        //  L.control.layers.tree(baseTree,overlayTree).addTo(map);

           L.control.layers.tree(baseTree,overlayTree);



     

         map.addControl(new L.Control.Fullscreen());
        

        /* var geocoder = L.Control.geocoder({
             defaultMarkGeocode: false
        }) .on('markgeocode', function(e) {
            var bbox = e.geocode.bbox;
            var poly = L.polygon([
                bbox.getSouthEast(),
                bbox.getNorthEast(),
                bbox.getNorthWest(),
                bbox.getSouthWest()
              //  ]).addTo(map);
                ])
                map.fitBounds(poly.getBounds());
            }).addTo(map); */

        var sidebar = L.control.sidebar({
            autopan: true,       // whether to maintain the centered map point when opening the sidebar
            closeButton: true,    // whether t add a close button to the panes
            container: 'sidebar', // the DOM container or #ID of a predefined sidebar container that should be used
            position: 'left',     // left or right
            
        }).addTo(map);
       
        

        /* add a new panel */
        var panelContent = {
            id: 'userinfo',                     // UID, used to access the panel
            tab: '<i class="fa fa-info"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            title:'Informació de dades',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

        /* add a new panel */
        var panelQuery = {
            id: 'queryTables',                     // UID, used to access the panel
            tab: '<i class="fa fa-table"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            title:'Consulta entitats urbanístiques',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

        /* add a new panel */
        var panelQueryExped = {
            id: 'queryExp',                     // UID, used to access the panel
            tab: '<i class="fa fa-file"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            title:'Consulta expedients',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

        /* add a new panel */
        var panelLegend = {
            id: 'legendMap',                     // UID, used to access the panel
            tab: '<i class="fa fa-map"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            //title:'paixxxxx',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

         /* add a new panel */
        var panelSearch = {
            id: 'searchDir',                     // UID, used to access the panel
            tab: '<i class="fa fa-search"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            title:'Cercar per direcció/ref.cadastral',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

         /* add a new panel */
        var panelCompute = {
            id: 'compute',                     // UID, used to access the panel
           //  tab: '<i class="fa fa-calculator"></i>',  // content can be passed as HTML string,
            tab: '<i class="fa fa-font"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
            title:'Consulta normatives',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

         /* add a new panel */
        var panelSpatial = {
            id: 'spatial',                     // UID, used to access the panel
            tab: '<i class="fa fa-object-group"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
           // title:'paixxxxx',              // an optional pane header
           // position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

         /* add a new panel */
        var panelConfig = {
            id: 'configProperties',                     // UID, used to access the panel
            tab: '<i class="fa fa-gear"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
           // title:'paixxxxx',              // an optional pane header
            position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

          /* add a new panel */
        var panelUser = {
            id: 'configUser',                     // UID, used to access the panel
            tab: '<i class="fa fa-user"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
           // title:'paixxxxx',              // an optional pane header
            position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };

          /* add a new panel */
        var panelStatistic = {
            id: 'statistic',                     // UID, used to access the panel
            tab: '<i class="fa fa-user"></i>',  // content can be passed as HTML string,
            pane: '-',        // DOM elements can be passed, too
           // title:'paixxxxx',              // an optional pane header
            position: 'bottom'                  // optional vertical alignment, defaults to 'top'
          
        };



        sidebar.addPanel(panelContent);
        sidebar.addPanel(panelQuery);
       // sidebar.addPanel(panelQueryExped);
         sidebar.addPanel(panelSearch);
     //   sidebar.addPanel(panelLegend);
        sidebar.addPanel(panelCompute);
      /*  sidebar.addPanel(panelSpatial);
        sidebar.addPanel(panelSearch);
        sidebar.addPanel(panelUser);
        sidebar.addPanel(panelConfig); */ 

        sidebar.addPanel(panelStatistic);


        // Leyenda

      /*  htmlL="";
        htmlL=htmlL+`<div style='overflow: auto;padding:20px;background-color:#f2f2f2;border-style: solid;border-width:0.1pt;border-color:black;box-shadow: 3px 3px 3px 3px rgba(0, 0, 0, 0.2);position:absolute;width:90%;height:90%;top:10px;left:10px'>
                <LABEL style='padding:10px;font-size:8.5pt;font-family:Arial Black;background-color:#fdfde0;color:#1a4d1a;box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);border-style: solid;border-width:0.1pt;border-color:black;width:380px;height:20px;'>LEGENDA</LABEL><BR><BR><BR>   
                   
                <TABLE style='padding:3px;font-size:9px;font-family:Arial;color:#000000;width:100%;height:10px'  BORDER=0  bgcolor="#cfd7e7" BORDERCOLOR="grey" CELLPADDING=3 CELLSPACING=1>
                <tr align="left" bgcolor="white" style='padding:10px;font-size:9.5px;font-family:Arial;color:#000000;height:20px'>
                    <td> 
                        <div class="column">
                            <img src="http://${serverPath}/images/prueba_leyenda.png">
                        </div>
                    </td>
                </tr>
           
                </TABLE>
                
               
               
                <BR>   
                </div>`;

        var htmlPG=`
            <TABLE style='padding:3px;font-size:9px;font-family:Arial;color:#000000;width:100%;height:10px'  BORDER=0  bgcolor="#cfd7e7" BORDERCOLOR="grey" CELLPADDING=3 CELLSPACING=1>
                <tr align="left" bgcolor="white" style='padding:10px;font-size:9.5px;font-family:Arial;color:#000000;height:20px'>
                    <td> 
                        <div class="column">
                            <img src="http://${serverPath}/images/prueba_leyenda.png">
                        </div>
                    </td>
                </tr>
            </TABLE>
            `;

        var htmlPRI=`
            <TABLE style='padding:3px;font-size:9px;font-family:Arial;color:#000000;width:100%;height:10px'  BORDER=0  bgcolor="#cfd7e7" BORDERCOLOR="grey" CELLPADDING=3 CELLSPACING=1>
                <tr align="left" bgcolor="white" style='padding:10px;font-size:9.5px;font-family:Arial;color:#000000;height:20px'>
                    <td> 
                        <div class="column">
                            <img src="http://${serverPath}/images/leyenda_pri.png">
                        </div>
                    </td>
                </tr>
            </TABLE>
            `;  */
        

      /*  var html_buttonsL=`
            <button class="accordionLegend">PLÁ GENERAL</button>
                <div class="panel">
                    <BR>
                    ${htmlPG} 
                    <BR>
                </div>
                
            <button class="accordionLegend">(PRI) PLÁ REFORMA INTEGRAL PLATJA DE PALMA</button>
                <div class="panel">
                     <BR>
                    ${htmlPRI} 
                     <BR>
                </div>
               
            `; 

        

        htmlL="";
        htmlL=htmlL+`<div style='overflow: auto;padding:20px;background-color:#f2f2f2;border-style: solid;border-width:0.1pt;border-color:black;box-shadow: 3px 3px 3px 3px rgba(0, 0, 0, 0.2);position:absolute;width:90%;height:90%;top:10px;left:10px'>
                <LABEL style='padding:10px;font-size:8.5pt;font-family:Arial Black;background-color:#fdfde0;color:#1a4d1a;box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);border-style: solid;border-width:0.1pt;border-color:black;width:380px;height:20px;'>LEGENDA</LABEL><BR><BR><BR>   
                   
                ${html_buttonsL}
               
                <BR>   
                </div>`;

        var elem = document.getElementById('legendMap'); 
        elem.innerHTML=htmlL;  */

        var accL = document.getElementsByClassName("accordionLegend");
        
        var i;
    
        for (i = 0; i < accL.length; i++) {
          
            
            accL[i].addEventListener("click", function() {
                this.classList.toggle("activeLegend");
                var panel = this.nextElementSibling;
                if (panel.style.display === "block") {
                    panel.style.display = "none";
                    
                } else {
                    panel.style.display = "block";
                    
                }
            });
        }

        // en leyenda     


        var layerUser;

        // create Query Revision
        var htmContentQueryRPG;
        var strSelectTABLE_RPG;
        var divOptionsQUERY_RPG;
        var divQUERY_RPG;
        contentQueryRPG();
        // end create Query Revision

        // create Query Vigente
        var strSelectTABLE;
        var divOptionsQUERY;
        var divQUERY;
        contentQuery();
        // end create Query Revision

        contentQueryEXP();
        contentSEARCH(); 

        var sidebarStatus="cerrado";  

            sidebar.on('opening', function(e) {
                // e.id contains the id of the opened panel

                console.log("abriendo");
                sidebarStatus="abierto";

            })

             sidebar.on('closing', function(e) {
                // e.id contains the id of the opened panel

                console.log("cerrando");
                 sidebarStatus="cerrado";

            })

          

         var graphicScale = L.control.graphicScale({fill:'hollow',doubleLine:false}).addTo(map);
         L.control.mouseCoordinate({utm:true,gps:false,gpsLong:false}).addTo(map); 

        // if(isMobile())
        //   map.toggleFullscreen();

      


        var appearanceControl;

        async function createOverlay(){

            var basetree={

                "CartoDB (light_all)": cartodb_light_all,
                "CartoDB (dark_all)":  cartodb_dark_all,
                "OpenStreeMap":osm,

            }
            
            var overlay = {
           
                "PNOA 2019": wmsPNOA2018,
               // "Parcela Catastral": wmsPARCELAS,
               // "Construcciones": wmsCONSTRU_SU,
                "catastro": catastro,
                "Plan Vigente": planeamiento,
                "Revisión PG": revision_fase1
           
            }   


           appearanceControl = L.control.appearance(null,overlay,null, {
                                                    opacity:true,
                                                    remove:true,
                                                    color:true,
                                                    removeIcon:'/stylesheets/images/delete16.png'});
          
             appearanceControl.addTo(map); 
         
           // appearanceControl._createColorElement("PRUEBA2","#ffff4d");
             appearanceControl.collapse();
            // appearanceControl.expand();

              appearanceControl._update();
          
         } 

         createOverlay();

        var stateViewAC=false;


        btnMapPDF=L.easyButton('<i class="fa fa-map" style="color:#6680e6;" ></i>', function(btn, map){
            
            findHoja(map)
            if(map.getZoom()>=16)
                console.log("activar")
        },'Obrir planol oficial POD (que conté el punt central del mapa)') 


        async function findHoja(map){



            console.log('Zoom: ' +map.getZoom())
            console.log('Zoom: ' +map.getCenter())
            var x=map.getCenter().utm().x
            var y=map.getCenter().utm().y
            console.log(x+","+y);

            // ver si esta en centro historico o fuera

            let url1 = new URL("http://"+serverPath+"/opg/infoXY_FASE1");
            const params1 = {tabla: "centro_historico", x: x, y: y};
            Object.keys(params1).forEach(key1 => url1.searchParams.append(key1, params1[key1]));
            const dataRequest1 = {
                method: 'GET'
            };
            var response1 = await fetch(url1,dataRequest1);
            // console.log(response);
            var geojsonRES1 = await response1.json();

            tabla="hojas1000"
            console.log(geojsonRES1.features)
            if(geojsonRES1.features!=null)
                tabla="hojas500ch" 

            // encontrar hoja

            let url = new URL("http://"+serverPath+"/opg/infoXY_FASE1");
            const params = {tabla: tabla, x: x, y: y};
            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
            const dataRequest = {
                method: 'GET'
            };
            var response = await fetch(url,dataRequest);
            // console.log(response);
            var geojsonRES = await response.json();
            console.log(geojsonRES.features[0].properties.hojasCordenadas)
            if(tabla=="hojas500ch") 
                window.open(window.location.protocol+'//'+window.location.host+'/images/_INDEX_OPG21/CH'+geojsonRES.features[0].properties.hoja+".pdf", '_blank');
            else 
                window.open(window.location.protocol+'//'+window.location.host+'/images/_INDEX_OPG21/'+geojsonRES.features[0].properties.hojasCordenadas+".pdf", '_blank');
      
        }

        map.on('zoomend', function () {
          /*  if(map.getZoom()>=17)
                map.addControl(btnMapPDF);
            else 
                map.removeControl(btnMapPDF); */

            testInPage()    

            console.log("termina zoom")
          
        }); 

        async function testInPage(){

            var x=map.getCenter().utm().x
            var y=map.getCenter().utm().y
            console.log(x+","+y);

            // ver si esta en centro historico o fuera

            let url1 = new URL("http://"+serverPath+"/opg/infoXY_FASE1");
            const params1 = {tabla: "hojas1000", x: x, y: y};
            Object.keys(params1).forEach(key1 => url1.searchParams.append(key1, params1[key1]));
            const dataRequest1 = {
                method: 'GET'
            };
            var response1 = await fetch(url1,dataRequest1);
            // console.log(response);
            var geojsonRES1 = await response1.json();

            if(geojsonRES1.features[0].properties.atlasSiNo=="SI" && map.getZoom()>=17)
                map.addControl(btnMapPDF);
            else 
                map.removeControl(btnMapPDF);

        }

         map.on('dragend', function () {
            
             testInPage()
            console.log("termina drag")
          
        }); 



      /*  L.easyButton('<i class="fa fa-map" style="color:#6680e6;" ></i>', function(btn, map){
            if(!stateViewAC){
                appearanceControl.expand();
                stateViewAC=true;
            }else{
                appearanceControl.collapse();
                stateViewAC=false;
            }
        }).addTo(map); */

        
        /*map3dC=false;
       
        function doMap3D(){


           
           

            L.tileLayer('http://'+serverPath+'/images/PG/{z}/{x}/{y}.png', {
                minZoom: 12,
                maxZoom: 20,
                tms: false,
                // attribution: 'Generated by TilesXYZ',
                edgeBufferTiles: 1,
                opacity: 1

            }).addTo(map3d);  



           
           



        }

        var html3D=`<div class="panel">
            <BR>
            <div id='map3'></div>
            <BR>
          
            </div>`;

         var options={
                size: [1200,800],
                position: 'topleft',               
            }
          var dialog = L.control.dialog(options);
          
            dialog.addTo(map);
           
            dialog.setContent(html3D);

             dialog.close();
         var map3d;
         map3d = WE.map('map3',{ center: [39.5695100, 2.6474500], zoom: 13, maxZoom: 20});

        

             WE.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
          attribution: '© OpenStreetMap contributors'
        }).addTo(map3d); 

        WE.tileLayer('http://'+serverPath+'/images/CONSTRU2/{z}/{x}/{y}.png', {
          
        }).addTo(map3d);  

          WE.tileLayer('http://'+serverPath+'/images/PG/{z}/{x}/{y}.png', {
              

            }).addTo(map3d);  

        // map2

        */

      

       /* var pnoa3d = L.tileLayer.wms("http://www.ign.es/wms-inspire/pnoa-ma?SERVICE=WMS&", {
            layers: "OI.OrthoimageCoverage",//nombre de la capa (ver get capabilities)
            format: 'image/jpeg',
            transparent: true,
            version: '1.3.0',//wms version (ver get capabilities)
            attribution: "PNOA WMS. Cedido por © Instituto Geográfico Nacional de España",
            maxZoom: 19,
            edgeBufferTiles: 0
        }).addTo(map3d);*/

       if(!isMobile()) L.control.browserPrint().addTo(map)

      /*  L.easyButton('<i class="fa fa-cubes fa-1x" ;" ></i>', function(btn, map){
           

           dialog.open();
             dialog.setLocation([25,50]); 


           
        }).addTo(map); */

        

      
        // nuevo TOC Control de capas



        // inicilaizar mapaBase

        var mapaBaseActual=cartodb_light_all;
        
        var ordenacion=new Array(4);
      

        var layersMapConsultas=new Array();
        var layersMapNormativa=new Array(); // para consultas fijas  

        //-----
        var initMapRev=false;
        var layersMapRev=new Array(); // layers temporales normativa

         arrayNormativaRev=new Array();

        var mapNormativa; 
        getJSONData(); // create modulo normativa

        var slide;
        createMainTOC_revision() // create Tabla contenidos

        createQueryDialog() // create query Dialog

        if(!isMobile())
        $( function() {
            $( document ).tooltip({
            //show: { effect: "blind", duration: 400 }
            //show: { effect: "explode", duration: 400 }
            //hide: { effect: "explode", duration: 1000 }
               show: { effect: 'slideDown', delay: 200, duration: 250 }
        
            });
        } );

        //  escribir acceso
       
      /*  let urlA = new URL("http://"+serverPath+"/write_data_user");
        const params = {accion:"acceso_revision"};
        Object.keys(params).forEach(key => urlA.searchParams.append(key, params[key]));
        const dataRequest = {
            method: 'GET'
        }; 
        fetch(urlA,dataRequest); */

         window.setTimeout(function() {
             if(!isMobile())
                slide._animate(slide._menu, 0, 0, true, 0, 0);
           
        }, 200);


        /*var magnifyingGlass = L.magnifyingGlass({
            layers: [ calificaciones ]
        }).addTo(map);*/

        

       console.log("protttoooocol="+window.location.protocol);
       console.log("host="+window.location.host);

        infoVisor()

       
        
       
       

        // end escribir acceso
        
       
       /* htmMenuSelect2=`
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Dropdown button
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#">Action</a>
                    <a class="dropdown-item" href="#">Another action</a>
                    <a class="dropdown-item" href="#">Something else here</a>
                </div>
            </div>
        `; */
        
       /* $(function () {
            $('select3').selectpicker({

                height: 15,
                width: true
            });

            $('#select3').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
               console.log("changed")
            });

        });

        
        htmMenuSelect3=`
                    <select class="selectpicker" id="select3" data-style="btn-info">
                        <option>Mustard</option>
                        <option>Ketchup</option>
                        <option>Barbecue</option>
                    </select>
                        `; */

       /* $( function() {
            $( "#speed" ).selectmenu();
            $( "#speed" ).selectmenu( "enable" );
           // $( "#speed" ).selectmenu( "open" );
        } );

        prueba=`
        <div>
        <select class="speed" name="speed" id="speed">
            <option>Slower</option>
            <option>Slow</option>
        </select>
        </div>
        `;

        var elem = document.getElementById('statistic');
        elem.innerHTML=prueba; */

       


    
        
       
      
   

     
     

